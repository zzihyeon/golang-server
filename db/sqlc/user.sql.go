// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email,
	name,
	phone,
  gender,
  birth_date
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING uid, email, name, phone, gender, birth_date, created_at, updated_at
`

type CreateUserParams struct {
	Email     string    `json:"email"`
	Name      string    `json:"name"`
	Phone     string    `json:"phone"`
	Gender    string    `json:"gender"`
	BirthDate time.Time `json:"birth_date"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Name,
		arg.Phone,
		arg.Gender,
		arg.BirthDate,
	)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Gender,
		&i.BirthDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE uid = $1
`

func (q *Queries) DeleteUser(ctx context.Context, uid int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, uid)
	return err
}

const getUser = `-- name: GetUser :one
SELECT uid, email, name, phone, gender, birth_date, created_at, updated_at FROM users WHERE uid = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, uid int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, uid)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Gender,
		&i.BirthDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email=$2, name=$3, phone=$4, gender=$5, birth_date=$6
WHERE uid = $1
RETURNING uid, email, name, phone, gender, birth_date, created_at, updated_at
`

type UpdateUserParams struct {
	Uid       int64     `json:"uid"`
	Email     string    `json:"email"`
	Name      string    `json:"name"`
	Phone     string    `json:"phone"`
	Gender    string    `json:"gender"`
	BirthDate time.Time `json:"birth_date"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Uid,
		arg.Email,
		arg.Name,
		arg.Phone,
		arg.Gender,
		arg.BirthDate,
	)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Gender,
		&i.BirthDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
